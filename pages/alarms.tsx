import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { Flex, Heading, Text } from "@chakra-ui/layout";
import { Button } from "@chakra-ui/button";
import { LargeContainer } from "../components/container";
import { Hero } from "../components/hero";
import useSWR from "swr";
import { AlarmSystem } from "@prisma/client";
import { colors } from "../theme/colors";
import { useState } from "react";
import {
  FormControl,
  FormHelperText,
  FormLabel,
  HStack,
  Radio,
  RadioGroup,
  Select,
} from "@chakra-ui/react";
import { SensorEventTable } from "../components/sensorevent-table";

type AlarmSystemProps = {
  alarmsystems: AlarmSystem[];
};

const fetcher = (url: string) => fetch(url).then((res) => res.json());

export default function Alarms() {
  const { data: session } = useSession();
  const {
    data: alarmsystemData,
    error,
    isValidating,
  } = useSWR<AlarmSystemProps, Error>("/api/alarmsystems/", fetcher);

  const [alarmsystemId, setAlarmsystemId] = useState("");

  const handleChange = (e) => {
    console.log("Event", e);
    setAlarmsystemId(e);
    console.log("alarm system: ", alarmsystemId);
  };

  if (error) return <div>failed to load</div>;
  if (isValidating) return <div>loading...</div>;

  return (
    <>
      <Head>
        <title>Alarmanlage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero src={"/index1600x500.jpg"}>
        {session ? (
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Heading as="h1" variant="large">
                Alarme
              </Heading>
              <Text>Das sind Deine Alarme.</Text>
            </Flex>
          </LargeContainer>
        ) : (
          <LargeContainer>
            <Text>Bitte Logge dich ein, um Deine private Seite zu sehen!</Text>
          </LargeContainer>
        )}
      </Hero>
      <LargeContainer>
        {session ? (
          <>
            {alarmsystemData ? (
              <>
                <FormControl as="fieldset">
                  <FormLabel as="legend">Alarmsysteme</FormLabel>
                  <RadioGroup value={alarmsystemId} onChange={handleChange}>
                    <HStack spacing="24px">
                      {alarmsystemData.alarmsystems.map((alarmsystem) => {
                        return (
                          <Radio key={alarmsystem.id} value={alarmsystem.id}>
                            {alarmsystem.name}
                          </Radio>
                        );
                      })}
                    </HStack>
                  </RadioGroup>
                  <FormHelperText>
                    Wähle ein Alarmsystem aus, um dazugehörige Ereignisse zu
                    betrachten.
                  </FormHelperText>
                </FormControl>

                {alarmsystemId ? (
                  <SensorEventTable
                    alarmsystemData={alarmsystemData}
                    alarmsystemId={alarmsystemId}
                  ></SensorEventTable>
                ) : (
                  <> </>
                )}
              </>
            ) : (
              <>
                <Text>Keine Alarmsysteme vorhanden</Text>
              </>
            )}
          </>
        ) : (
          <></>
        )}
      </LargeContainer>
    </>
  );
}
