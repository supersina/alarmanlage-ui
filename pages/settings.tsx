import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { Flex, Heading, Text } from "@chakra-ui/layout";
import { Button } from "@chakra-ui/button";
import { LargeContainer } from "../components/container";
import { Hero } from "../components/hero";
// import { Alarm, User } from "@prisma/client";
// import { AlarmTable } from "../components/alarm-table";
import { EditUsrDataForm } from "../components/edit-usr-data-form";
import useSWR from "swr";
import { AlarmSystem } from "@prisma/client";
import { EditAlarmsystemDataForm } from "../components/edit-alarmsystem-data-form";
import { useState } from "react";
import { Input, Switch } from "@chakra-ui/react";

async function saveNewAlarmSystem(alarmsystem) {
  const response = await fetch("/api/alarmsystems/", {
    method: "POST",
    body: JSON.stringify(alarmsystem),
  });
  if (!response.ok) {
    alert("Achtung, Fehler! Änderungen konnten nicht gespeichert werden!");
    throw new Error(response.statusText);
  }
  //todo: alert with success message
  else {
    alert("Änderungen wurden gespeichert!");
    return response;
  }
}
const fetcher = (url: string) => fetch(url).then((res) => res.json());

type UserDataAreaProps = {
  alarmsystems: AlarmSystem[];
};

export default function Settings() {
  const [newAlarmSystem, setNewAlarmSystem] = useState({
    isActive: false,
    name: "",
  });

  const { data: session } = useSession();
  const {
    data: alarmsystems,
    error: alarmError,
    isValidating: isValidatingAlarmSystems,
  } = useSWR<UserDataAreaProps, Error>("/api/alarmsystems", fetcher);

  const {
    data: userdata,
    error: userError,
    isValidating: isValidatingUser,
  } = useSWR<UserDataAreaProps, Error>("/api/user", fetcher);

  if (alarmError || userError) return <div>failed to load</div>;
  if (isValidatingAlarmSystems || isValidatingUser)
    return <div>loading...</div>;

  const updateNewData = (e) => {
    let valueToSet = e.target.value;

    setNewAlarmSystem({
      ...newAlarmSystem,
      [e.target.name]: valueToSet,
    });
  };

  function saveUpdatesNewAlarmSystem() {
    saveNewAlarmSystem(newAlarmSystem);
  }

  return (
    <>
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero src={"/about1600x500.jpg"}>
        {session ? (
          <>
            <Flex width="100%" justifyContent="flex-end">
              <Button
                width="fit-content"
                margin="2rem"
                colorScheme="yellow"
                onClick={() => signOut()}
              >
                Sign out
              </Button>
            </Flex>
            <LargeContainer>
              <Flex
                direction="column"
                width="100%"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h1" variant="large">
                  Einstellungen
                </Heading>
                <Text>
                  Nimm Änderungen an deinen persönlichen Daten vor und bearbeite
                  dein Alarmsystem.
                </Text>
              </Flex>
            </LargeContainer>
          </>
        ) : (
          <LargeContainer>
            <Text>Bitte Logge dich ein, um Deine private Seite zu sehen!</Text>
          </LargeContainer>
        )}
        {session ? (
          <></>
        ) : (
          <>
            <LargeContainer>
              <Button
                marginTop="2rem"
                colorScheme="yellow"
                onClick={() => signIn()}
              >
                Sign in
              </Button>
            </LargeContainer>
          </>
        )}
      </Hero>

      {session ? (
        <>
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Flex
                width={{ base: "90%", sm: "90%", md: "50%", lg: "50%" }}
                direction="column"
                margin="2rem"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h2"> Deine persönlichen Daten</Heading>
                <EditUsrDataForm initialUser={userdata}></EditUsrDataForm>
              </Flex>
            </Flex>
          </LargeContainer>
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Flex
                direction="column"
                width={{ base: "90%", sm: "90%", md: "50%", lg: "50%" }}
                margin="2rem"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h2"> Neues Alarmsystem anlegen</Heading>

                <Input
                  size="lg"
                  name="name"
                  value={newAlarmSystem.name ? newAlarmSystem.name : ""}
                  placeholder="Name"
                  onChange={updateNewData}
                />

                <Button onClick={saveUpdatesNewAlarmSystem} margin="2rem">
                  Änderungen speichern
                </Button>
              </Flex>
            </Flex>
          </LargeContainer>
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Flex
                direction="column"
                margin="2rem"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h2"> Deine Alarmsysteme</Heading>

                {alarmsystems ? (
                  alarmsystems.alarmsystems.map((alarmsystem) => {
                    return (
                      <EditAlarmsystemDataForm
                        key={alarmsystem.id}
                        alarmsystem={alarmsystem}
                      ></EditAlarmsystemDataForm>
                    );
                  })
                ) : (
                  <Text>Keine Alarmsysteme vorhanden</Text>
                )}
              </Flex>
            </Flex>
          </LargeContainer>
        </>
      ) : (
        <></>
      )}
    </>
  );
}
