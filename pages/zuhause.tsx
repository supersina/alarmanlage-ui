import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { Flex, Heading, Text } from "@chakra-ui/layout";
import { Button } from "@chakra-ui/button";
import { LargeContainer } from "../components/container";
import { Hero } from "../components/hero";
import { WelcomeHomeArea } from "../components/welcome-home-area";
import useSWR from "swr";
import { AlarmSystem, Session } from "@prisma/client";
import { colors } from "../theme/colors";

type UserDataAreaProps = {
  alarmsystems: AlarmSystem[];
};

const fetcher = (url: string) => fetch(url).then((res) => res.json());

export default function Zuhause() {
  const { data: session } = useSession();

  const {
    data: alarmsystems,
    error,
    isValidating,
  } = useSWR<UserDataAreaProps, Error>("/api/alarmsystems", fetcher);

  if (error) return <div>failed to load</div>;
  if (isValidating) return <div>loading...</div>;

  return (
    <>
      <Head>
        <title>Alarmanlage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero src={"/307-1600x500.jpg"}>
        {session ? (
          <>
            <Flex width="100%" justifyContent="flex-end">
              <Button
                width="fit-content"
                margin="2rem"
                colorScheme="yellow"
                onClick={() => signOut()}
              >
                Sign out
              </Button>
            </Flex>
            <LargeContainer>
              <Flex
                direction="column"
                width="100%"
                justifyContent="center"
                alignItems="center"
              >
                <Heading
                  as="h1"
                  backgroundColor={colors.mainColor}
                  variant="large"
                >
                  Willkommen in Deinem sicheren Zuhause!
                </Heading>
                <Text>
                  Überprüfe Dein Alarmsystem, nimm Änderungen vor und sieh Dir
                  Deine Alarmhistorie an.
                </Text>
              </Flex>
            </LargeContainer>
            <LargeContainer>
              <Flex width="100%" justifyContent="center">
                <Flex
                  direction="column"
                  alignItems="center"
                  justifyContent="center"
                  margin="1rem"
                  width="fit-content"
                >
                  <WelcomeHomeArea user={session.user}></WelcomeHomeArea>
                </Flex>
              </Flex>
            </LargeContainer>
          </>
        ) : (
          <LargeContainer>
            <Text>Bitte Logge dich ein, um Deine private Seite zu sehen!</Text>
          </LargeContainer>
        )}
        {session ? (
          <></>
        ) : (
          <>
            <LargeContainer>
              <Button
                marginTop="2rem"
                colorScheme="yellow"
                onClick={() => signIn()}
              >
                Sign in
              </Button>
            </LargeContainer>
          </>
        )}
      </Hero>
      <LargeContainer>
        {session ? (
          <>
            {alarmsystems ? (
              <Text>Hier erscheinen bald die Alarme deines Alarmsystems</Text>
            ) : (
              // <UserDataArea alarmsystems={alarmsystems}></UserDataArea>
              <>
                <Text>Keine Alarmsysteme vorhanden</Text>
                <Button>Alarmsystem hinzufügen</Button>
              </>
            )}
          </>
        ) : (
          <></>
        )}
      </LargeContainer>
    </>
  );
}

// import { GetServerSideProps } from "next";
// import { useEffect } from "react";

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   // Fetch data from API
//   const url = new URL("api/alarmsystems", process.env.API_URL);
//   const response = await fetch(url.href, {
//     method: "GET",
//     credentials: "include",
//   });
//   if (!response.ok) {
//     throw new Error(response.statusText);
//   }
//   const data = await response.json();
//   // Pass data to the page via props
//   return { props: { data, session: await getSession(context) } };
// };
