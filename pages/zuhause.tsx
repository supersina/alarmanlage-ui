import Head from "next/head";
import Image from "next/image";
import { signIn, signOut, useSession } from "next-auth/client";
import { useState } from "react";
import { Flex, Heading, Text } from "@chakra-ui/layout";
import { Button } from "@chakra-ui/button";
import { LargeContainer } from "../components/container";
import { Hero } from "../components/hero";

import { PrismaClient, Prisma, User } from "@prisma/client";
import { EditForm } from "../components/form";

const prisma = new PrismaClient();

export async function getServerSideProps() {
  const users: User[] = await prisma.user.findMany();
  return {
    props: {
      initialUsers: users,
    },
  };
}
// async function saveUser(user: Prisma.UserCreateInput) {
//   const response = await fetch("/api/user", {
//     method: "POST",
//     body: JSON.stringify(user),
//   });
//   if (!response.ok) {
//     throw new Error(response.statusText);
//   }
//   return await response.json();
// }

export default function Zuhause({ initialUsers }) {
  const [session] = useSession();
  const [users, setUsers] = useState<User[]>(initialUsers);

  return (
    <>
      <Head>
        <title>Alarmanlage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero src={"/about1600x500.jpg"}>
        {session ? (
          <LargeContainer>
            <Heading as="h1" variant="large">
              Willkommen in Deinem sicheren Zuhause!
            </Heading>
            <Text>
              Überprüfe Dein Alarmsystem, nimm Änderungen vor und sieh Dir Deine
              Alarmhistorie an.
            </Text>
          </LargeContainer>
        ) : (
          <LargeContainer>
            <Text>Bitte Logge dich ein, um Deine private Seite zu sehen!</Text>
          </LargeContainer>
        )}
        {session ? (
          <>
            <LargeContainer>
              {console.log(session.user)}
              <Text>
                Du bist eingeloggt als{" "}
                {session.user.name ? session.user.name : session.user.email}
              </Text>
              <Button
                marginTop="2rem"
                colorScheme="yellow"
                onClick={() => signOut()}
              >
                Sign out
              </Button>{" "}
            </LargeContainer>
            {/* <LargeContainer>
              <Text>Data:</Text>
              {users.map((user: User, index: number) => {
                return (
                  <Flex key={index}>
                    <Text>User is {user.name}</Text>
                    <Text>Email is {user.email}</Text>
                  </Flex>
                );
              })}
            </LargeContainer> */}
          </>
        ) : (
          <>
            <LargeContainer>
              <Button
                marginTop="2rem"
                colorScheme="yellow"
                onClick={() => signIn()}
              >
                Sign in
              </Button>
            </LargeContainer>
          </>
        )}
      </Hero>
      <LargeContainer>
        {session ? <EditForm initialUser={session.user} /> : <></>}
      </LargeContainer>
    </>
  );
}
