import Head from "next/head";
import { useSession } from "next-auth/react";
import { Flex, Heading, Input, List, ListItem, Text } from "@chakra-ui/react";
import { Button } from "@chakra-ui/button";
import { LargeContainer } from "../../components/container";
import { Hero } from "../../components/hero";
import useSWR from "swr";
import { ChangeEvent, useState } from "react";
import Link from "next/link";
import { AlarmSystemGetWithDate } from "../api/alarmsystems";

type NewAlarmSystem = Pick<
  AlarmSystemGetWithDate["alarmsystems"][0],
  "isActive" | "name"
>;

async function saveNewAlarmSystem(alarmsystem: NewAlarmSystem) {
  const response = await fetch("/api/alarmsystems/", {
    method: "POST",
    body: JSON.stringify(alarmsystem),
  });
  if (!response.ok) {
    alert("Achtung, Fehler! Änderungen konnten nicht gespeichert werden!");
    throw new Error(response.statusText);
  }
  //todo: alert with success message
  else {
    alert("Änderungen wurden gespeichert!");
    return response;
  }
}
const fetcher = (url: string) => fetch(url).then((res) => res.json());

export default function Alarmsystems() {
  const [newAlarmSystem, setNewAlarmSystem] = useState<NewAlarmSystem>({
    isActive: false,
    name: "",
  });

  const { data: session } = useSession();
  const {
    data: alarmsystems,
    error: alarmError,
    isValidating: isValidatingAlarmSystems,
  } = useSWR<AlarmSystemGetWithDate, Error>("/api/alarmsystems", fetcher);

  if (alarmError) return <div>failed to load</div>;
  if (isValidatingAlarmSystems) return <div>loading...</div>;

  const updateNewData = (e: ChangeEvent<HTMLInputElement>) => {
    let valueToSet = e.target.value;

    setNewAlarmSystem({
      ...newAlarmSystem,
      [e.target.name]: valueToSet,
    });
  };

  function saveUpdatesNewAlarmSystem() {
    saveNewAlarmSystem(newAlarmSystem);
    setNewAlarmSystem({ ...newAlarmSystem, name: "" });
  }

  return (
    <>
      <Head>
        <title>Alarmsystems</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Hero src={"/about1600x500.jpg"}>
        {session ? (
          <>
            <LargeContainer>
              <Flex
                direction="column"
                width="100%"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h1" variant="large">
                  Alarmsysteme
                </Heading>
                <Text>Das sind Deine Alarmsysteme.</Text>
              </Flex>
            </LargeContainer>
          </>
        ) : (
          <LargeContainer>
            <Text>Bitte Logge dich ein, um Deine private Seite zu sehen!</Text>
          </LargeContainer>
        )}
      </Hero>

      {session ? (
        <>
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Flex
                direction="column"
                margin="2rem"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h2" variant="medium">
                  Deine Alarmsysteme
                </Heading>

                {alarmsystems ? (
                  <List>
                    {alarmsystems.alarmsystems.map((alarmsystem) => {
                      return (
                        <ListItem key={alarmsystem.id}>
                          <Flex
                            direction="row"
                            margin="1rem"
                            align="center"
                            justifyContent="space-between"
                          >
                            <Text marginRight="2rem">{alarmsystem.name}</Text>
                            <Button>
                              <Link
                                href={`/alarmsystems/${encodeURIComponent(
                                  alarmsystem.id
                                )}`}
                              >
                                <a>Bearbeiten</a>
                              </Link>
                            </Button>
                          </Flex>
                        </ListItem>
                      );
                    })}
                  </List>
                ) : (
                  <Text>Keine Alarmsysteme vorhanden</Text>
                )}
              </Flex>
            </Flex>
          </LargeContainer>
          <LargeContainer>
            <Flex
              direction="column"
              width="100%"
              justifyContent="center"
              alignItems="center"
            >
              <Flex
                direction="column"
                margin="2rem"
                justifyContent="center"
                alignItems="center"
              >
                <Heading as="h2" variant="medium">
                  Neues Alarmsystem anlegen
                </Heading>

                <Input
                  size="lg"
                  name="name"
                  value={newAlarmSystem.name ? newAlarmSystem.name : ""}
                  placeholder="Name"
                  onChange={updateNewData}
                />

                <Button onClick={saveUpdatesNewAlarmSystem} margin="2rem">
                  Änderungen speichern
                </Button>
              </Flex>
            </Flex>
          </LargeContainer>
        </>
      ) : (
        <></>
      )}
    </>
  );
}
