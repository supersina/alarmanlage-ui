// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  alarmSystems  AlarmSystem[]
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @map(name: "updated_at")
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 @@map(name: "verification_tokens")
}

model AlarmSystem {
  id        String   @id @default(uuid())
  name      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean
  sensors   Sensor[]
  apiToken  String   @unique @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model Sensor {
  id               String        @id @default(uuid())
  alarmSystem      AlarmSystem   @relation(fields: [alarmSystemId], references: [id])
  alarmSystemId    String
  name             String
  sensorCodeOpen   String
  sensorCodeClosed String
  sensorEvents     SensorEvent[]
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  updatedAt        DateTime      @default(now()) @map(name: "updated_at")
}

model SensorEvent {
  id         String   @id @default(uuid())
  sensorId   String
  sensor     Sensor   @relation(fields: [sensorId], references: [id])
  sensorCode String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
}
